#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("backend:server");
const http = require("http");
const config = require("../config/index");
const { nextTick } = require("process");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.PORT || "4000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

const io = require("socket.io")(server, {
  cors: {
    origin: "*",
  },
});
const User = require("../models/user");
const Notification = require("../models/notification");
const { notify } = require("../app");
const post = require("../models/post");

io.on("connection", (socket) => {
  socket.on("sent-post", (user_id) => {
    socket.broadcast.emit("new-post", user_id);
    // io.emit("new-message", "ข้อความ");
  });

  socket.on("join-rooms", (rooms) => {
    socket.join(rooms);
  });

  socket.on("notification", (post_id) => {
    const query = { subscribedPosts: { $elemMatch: { _id: post_id } } };
    let users = User.find(query);
    users.forEach((user) => {
      let notification = new Notification({
        type: "comment",
        user: user._id,
        post: post_id,
      });
      notification.save();
    });
    socket.to(post_id).emit("new-comment`")
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  let bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
